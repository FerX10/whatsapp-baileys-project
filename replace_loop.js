const fs = require('fs');
const path = 'src/services/ficha-coti-processor.js';
let text = fs.readFileSync(path, 'utf8');
const oldSegment = `    for (let i = 0; i < parsed.dateWindows.length && i < this.maxWindows; i++) {\n      const window = parsed.dateWindows[i];\n      try {\n        const tierResults = await this._executeSearch(parsed, window, pasajerosConfig);\n        if (!tierResults || !tierResults.options.length) {\n          await this._safeSend(phoneNumber, \`Para ${formatDateRange(window.salida, window.regreso)} no encontre opciones disponibles. Intentamos con otras fechas?\`);\n          await sleep(300);\n          continue;\n        }\n\n        const decorated = [];\n        for (const opt of tierResults.options) {\n          decorated.push(await this._enrichWithMedia(opt));\n        }\n\n        const messageChunks = await this._buildWindowMessages(parsed, window, {\n          ...tierResults,\n          options: decorated\n        });\n\n        for (const chunk of messageChunks) {\n          await this._safeSend(phoneNumber, chunk);\n          await sleep(450);\n        }\n\n        if (i === 0) {\n          try {\n            const cotizacionesService = require('./cotizaciones.service');\n            await cotizacionesService.guardarCotizacion({\n              numero_telefono: phoneNumber,\n              tipo: 'PERSONALIZADA',\n              datos_cotizacion: {\n                destino: parsed.destino,\n                check_in: window.salida,\n                check_out: window.regreso,\n                ocupacion: {\n                  adultos: parsed.adultos.map((_, idx) => ({ nombre: \`Adulto ${idx + 1}\`, edad: 30 })),\n                  menores: parsed.menores.map(edad => ({ nombre: \`Menor\`, edad }))\n                },\n                plan: parsed.plan,\n                transporte: parsed.transporte,\n                hotel_deseado: parsed.hotelDeseado,\n                presupuesto_aprox_adulto: parsed.presupuestoAdulto,\n                num_opciones: tierResults.options.length\n              }\n            });\n            console.log(\`Cotización guardada exitosamente para ${phoneNumber}\`);\n          } catch (err) {\n            console.error('Error guardando cotización:', err);\n          }\n        }\n\n      } catch (error) {\n        console.error('FichaCotiProcessor window error:', error);\n        await this._safeSend(\n          phoneNumber,\n          \`Tuvimos un detallito con la ventana *${formatDateRange(window.salida, window.regreso)}*. Ya avisé al equipo humano para ayudarte en cuanto tengan disponibilidad.\`\n        );\n        await sleep(300);\n      }\n    }\n`;
if (!text.includes(oldSegment)) {
  throw new Error('Old loop block not found');
}
const newSegment = `    const transportModesInput = Array.isArray(parsed.transportes) && parsed.transportes.length\n      ? parsed.transportes\n      : [parsed.transporte].filter(Boolean);\n    const uniqueModes = Array.from(new Set(transportModesInput.length ? transportModesInput : ['camion']));\n    const rawWindows = Array.isArray(parsed.rawDateWindows) && parsed.rawDateWindows.length\n      ? parsed.rawDateWindows\n      : parsed.dateWindows;\n\n    let cotizacionRegistrada = false;\n\n    for (const mode of uniqueModes) {\n      const windowsForMode = (rawWindows || [])\n        .map(window => adjustWindowForTransport(window, mode))\n        .filter(Boolean)\n        .slice(0, this.maxWindows);\n\n      if (!windowsForMode.length) continue;\n\n      if (uniqueModes.length > 1) {\n        await this._safeSend(phoneNumber, formatTransportLabel(mode) + ' · preparando opciones...');\n        await sleep(250);\n      }\n\n      for (let i = 0; i < windowsForMode.length; i += 1) {\n        const window = windowsForMode[i];\n        try {\n          const tierResults = await this._executeSearch(parsed, window, pasajerosConfig, mode);\n          if (!tierResults || !tierResults.options.length) {\n            await this._safeSend(phoneNumber, 'Para ' + formatDateRange(window.salida, window.regreso) + ' (' + formatTransportLabel(mode, false) + ') no encontre opciones disponibles. Probamos con otra fecha?');\n            await sleep(300);\n            continue;\n          }\n\n          const decorated = [];\n          for (const opt of tierResults.options) {\n            decorated.push(await this._enrichWithMedia(opt));\n          }\n\n          const parsedForMode = { ...parsed, transporte: mode };\n          const messageChunks = await this._buildWindowMessages(parsedForMode, window, {\n            ...tierResults,\n            mode,\n            options: decorated\n          });\n\n          for (const chunk of messageChunks) {\n            await this._safeSend(phoneNumber, chunk);\n            await sleep(450);\n          }\n\n          if (!cotizacionRegistrada) {\n            try {\n              const cotizacionesService = require('./cotizaciones.service');\n              await cotizacionesService.guardarCotizacion({\n                numero_telefono: phoneNumber,\n                tipo: 'PERSONALIZADA',\n                datos_cotizacion: {\n                  destino: parsed.destino,\n                  check_in: window.salida,\n                  check_out: window.regreso,\n                  ocupacion: {\n                    adultos: parsed.adultos.map((_, idx) => ({ nombre: 'Adulto ' + (idx + 1), edad: 30 })),\n                    menores: parsed.menores.map(edad => ({ nombre: 'Menor', edad }))\n                  },\n                  plan: parsed.plan,\n                  transporte: uniqueModes.join(' + '),\n                  hotel_deseado: parsed.hotelDeseado,\n                  presupuesto_aprox_adulto: parsed.presupuestoAdulto,\n                  num_opciones: tierResults.options.length\n                }\n              });\n              console.log('Cotizacion guardada exitosamente para ' + phoneNumber);\n              cotizacionRegistrada = true;\n            } catch (err) {\n              console.error('Error guardando cotizacion:', err);\n            }\n          }\n        } catch (error) {\n          console.error('FichaCotiProcessor window error:', error);\n          await this._safeSend(\n            phoneNumber,\n            '?? Tuvimos un detallito con la ventana *' + formatDateRange(window.salida, window.regreso) + '* (' + formatTransportLabel(mode, false) + '). Ya avisé al equipo humano para ayudarte en cuanto tengan disponibilidad.'\n          );\n          await sleep(300);\n        }\n      }\n    }\n`;
text = text.replace(oldSegment, newSegment);
fs.writeFileSync(path, text);
